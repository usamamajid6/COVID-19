{"version":3,"sources":["Home/Home.jsx","Footer/Footer.jsx","App.jsx","index.js"],"names":["Home","state","totalCases","totalDeaths","totalRecovered","activeCases","rows","componentDidMount","a","axios","method","url","headers","result","setState","data","cases","deaths","recovered","sort","b","console","log","sortResult","i","length","element","isNaN","total_cases","parseInt","total_death","total_recovered","className","style","color","value","this","displayType","thousandSeparator","thousandsGroupStyle","renderText","NumberToWord","toWords","TableContainer","component","Paper","Table","stickyHeader","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","src","countryInfo","flag","alt","country","todayCases","todayDeaths","active","critical","casesPerOneMillion","deathsPerOneMillion","React","Component","Footer","target","rel","href","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e46e8474.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Home.css\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport NumberToWord from \"number-to-words\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst descendingComparator = (a, b, orderBy) => {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst getComparator = (order, orderBy) => {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n};\r\n\r\nconst stableSort = (array, comparator) => {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map(el => el[0]);\r\n};\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    totalCases: 0,\r\n    totalDeaths: 0,\r\n    totalRecovered: 0,\r\n    activeCases: 0,\r\n    rows: []\r\n  };\r\n  componentDidMount = async () => {\r\n    let result = await axios({\r\n      method: \"get\",\r\n      url: `https://corona.lmao.ninja/all`,\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      }\r\n    });\r\n    this.setState({\r\n      totalCases: result.data.cases,\r\n      totalDeaths: result.data.deaths,\r\n      totalRecovered: result.data.recovered,\r\n      activeCases:\r\n        result.data.cases - result.data.deaths - result.data.recovered\r\n    });\r\n    result = await axios({\r\n      method: \"get\",\r\n      url: `https://corona.lmao.ninja/countries`,\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      }\r\n    });\r\n\r\n    // const rows = JSON.stringify(result.data);\r\n    const rows = result.data;\r\n    rows.sort((a, b) => {\r\n      return b.cases - a.cases;\r\n    });\r\n    console.log(rows);\r\n\r\n    this.setState({\r\n      rows\r\n    });\r\n  };\r\n\r\n  sortResult = result => {\r\n    let totalCases = 0;\r\n    let totalDeaths = 0;\r\n    let totalRecovered = 0;\r\n    for (let i = 0; i < result.length; i++) {\r\n      const element = result[i];\r\n      if (!isNaN(element.total_cases)) {\r\n        totalCases += parseInt(element.total_cases);\r\n      }\r\n      if (element.total_death !== \"\") {\r\n        totalDeaths += parseInt(element.total_death);\r\n      }\r\n      if (element.total_recovered !== \"\") {\r\n        totalRecovered += parseInt(element.total_recovered);\r\n      }\r\n    }\r\n    console.log(totalCases, totalDeaths, totalRecovered);\r\n    this.setState({\r\n      totalCases,\r\n      totalDeaths,\r\n      totalRecovered\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // const classes = this.useStyles();\r\n    return (\r\n      <div>\r\n        <div className=\"mainHead\">CORONA VIRUS(COVID-19) STATUS</div>\r\n        <div className=\"mainFigures\" style={{ color: \"darkblue\" }}>\r\n          <div className=\"mainFiguresFigure\">\r\n            <NumberFormat\r\n              value={this.state.totalCases}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              thousandsGroupStyle=\"lakh\"\r\n              renderText={value => <div>{value}</div>}\r\n            />\r\n          </div>\r\n          <div className=\"mainFiguresTitle\">CASES</div>\r\n          <div className=\"mainFiguresInWords\">\r\n            ({NumberToWord.toWords(this.state.totalCases)})\r\n          </div>\r\n        </div>\r\n        <div className=\"mainFigures\" style={{ color: \"red\" }}>\r\n          <div className=\"mainFiguresFigure\">\r\n            <NumberFormat\r\n              value={this.state.totalDeaths}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              thousandsGroupStyle=\"lakh\"\r\n              renderText={value => <div>{value}</div>}\r\n            />\r\n          </div>\r\n          <div className=\"mainFiguresTitle\">DEATHS</div>\r\n          <div className=\"mainFiguresInWords\">\r\n            ({NumberToWord.toWords(this.state.totalDeaths)})\r\n          </div>\r\n        </div>\r\n        <div className=\"mainFigures\" style={{ color: \"green\" }}>\r\n          <div className=\"mainFiguresFigure\">\r\n            <NumberFormat\r\n              value={this.state.totalRecovered}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              thousandsGroupStyle=\"lakh\"\r\n              renderText={value => <div>{value}</div>}\r\n            />\r\n          </div>\r\n          <div className=\"mainFiguresTitle\">RECOVERED</div>\r\n          <div className=\"mainFiguresInWords\">\r\n            ({NumberToWord.toWords(this.state.totalRecovered)})\r\n          </div>\r\n        </div>\r\n        <div className=\"mainFigures\" style={{ color: \"grey\" }}>\r\n          <div className=\"mainFiguresFigure\">\r\n            <NumberFormat\r\n              value={this.state.activeCases}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              thousandsGroupStyle=\"lakh\"\r\n              renderText={value => <div>{value}</div>}\r\n            />\r\n          </div>\r\n          <div className=\"mainFiguresTitle\">ACTIVE CASES</div>\r\n          <div className=\"mainFiguresInWords\">\r\n            ({NumberToWord.toWords(this.state.activeCases)})\r\n          </div>\r\n        </div>\r\n        <TableContainer className=\"tableStyle\" component={Paper}>\r\n          <Table stickyHeader size=\"small\" aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"center\">#</TableCell>\r\n                <TableCell align=\"left\">Country Name</TableCell>\r\n                <TableCell align=\"left\">Cases</TableCell>\r\n                <TableCell align=\"left\">Today Cases</TableCell>\r\n                <TableCell align=\"left\">Deaths</TableCell>\r\n                <TableCell align=\"left\">Today Deaths</TableCell>\r\n                <TableCell align=\"left\">Recovered</TableCell>\r\n                <TableCell align=\"left\">Active</TableCell>\r\n                <TableCell align=\"left\">Critical</TableCell>\r\n                <TableCell align=\"left\">CP1M</TableCell>\r\n                <TableCell align=\"left\">DP1M</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {this.state.rows.map((row, i) => (\r\n                <TableRow key={i}>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {i + 1}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" component=\"th\" scope=\"row\">\r\n                    <img className=\"flag\" src={row.countryInfo.flag} alt=\"\" />{\" \"}\r\n                    &nbsp;\r\n                    {row.country}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.cases}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.todayCases}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.deaths}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.todayDeaths}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.recovered}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.active}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.critical}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.casesPerOneMillion}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.deathsPerOneMillion}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={value => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport \"./Footer.css\";\r\nclass Footer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"mainFooter\">\r\n        A little effort By Usama Majid{\" \"}\r\n        <a\r\n          style={{ color: \"white\" }}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href=\"mailto:usamamajid6@gmail.com\"\r\n        >\r\n          Contact Me!\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Home from \"./Home/Home\";\r\nimport Footer from \"./Footer/Footer\";\r\nimport './App.css';\r\nclass App extends React.Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Home />\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nReactDOM.render(<App/>,document.getElementById('root'));"],"sourceRoot":""}