{"version":3,"sources":["Home/Map.jsx","Home/Home.jsx","Footer/Footer.jsx","App.jsx","index.js"],"names":["legend","geojson","L","geoJSON","info","control","Map","props","componentDidMount","loadMap","map","center","state","lat","lng","zoom","tileLayer","maxZoom","attribution","addTo","geoJson","style","onEachFeature","onAdd","_div","DomUtil","create","update","innerHTML","name","cases","recovered","deaths","active","position","div","grades","i","length","getColor","highlightFeature","e","layer","target","setStyle","weight","color","dashArray","fillOpacity","Browser","ie","opera","edge","bringToFront","feature","properties","resetHighlight","resetStyle","zoomToFeature","fitBounds","getBounds","on","mouseover","mouseout","click","d","fillColor","opacity","id","className","Component","Home","totalCases","totalDeaths","totalRecovered","activeCases","rows","tableOrMap","tableOrMapLoader","locations","a","axios","method","url","headers","result","setState","data","sort","b","features","geo","j","row","countryInfo","iso3","componentDidUpdate","sortResult","element","isNaN","total_cases","parseInt","total_death","total_recovered","console","log","TableContainer","component","Paper","Table","stickyHeader","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","scope","src","flag","alt","country","value","displayType","thousandSeparator","thousandsGroupStyle","renderText","todayCases","todayDeaths","critical","casesPerOneMillion","deathsPerOneMillion","this","NumberToWord","toWords","Switch","checked","onChange","inputProps","React","Footer","rel","href","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.179845a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Home.css\";\r\nimport L from \"leaflet\";\r\n// import geoJSON from \"../Assets/countryGeoJSON.json\";\r\n\r\nlet geojson = L.geoJSON();\r\nlet info = L.control();\r\nlet legend;\r\n\r\n\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      center: { lat: 21.3891, lng: 39.8579 },\r\n      zoom: 2,\r\n      geoJSON: props.geoJSON,\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.loadMap();\r\n    // console.log(this.state.geoJSON);\r\n    \r\n  };\r\n  loadMap = () => {\r\n    this.map = L.map(\"map\", {\r\n      center: [this.state.center.lat, this.state.center.lng],\r\n      zoom: this.state.zoom,\r\n    });\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      maxZoom: 19,\r\n      attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n    }).addTo(this.map);\r\n    geojson = L.geoJson(this.state.geoJSON, {\r\n      style: this.style,\r\n      onEachFeature: this.onEachFeature,\r\n    });\r\n    geojson.addTo(this.map);\r\n\r\n    info.onAdd = (map) => {\r\n      this._div = L.DomUtil.create(\"div\", \"info\"); // create a div with a class \"info\"\r\n      info.update();\r\n      return this._div;\r\n    };\r\n\r\n    // method that we will use to update the control based on feature properties passed\r\n    info.update = (props) => {\r\n      this._div.innerHTML =\r\n        \"<h4>CORONA STATUS</h4>\" +\r\n        (props\r\n          ? \"<b>\" +\r\n            props.name +\r\n            \"</b><br />\" +\r\n            \"Total Cases: \" +\r\n            props.cases +\r\n            \"</b><br />\" +\r\n            \"Recovered: \" +\r\n            props.recovered +\r\n            \"</b><br />\" +\r\n            \"Deaths: \" +\r\n            props.deaths +\r\n            \"</b><br />\" +\r\n            \"Active Cases: \" +\r\n            props.active\r\n          : \"Hover over a country\");\r\n    };\r\n\r\n    info.addTo(this.map);\r\n\r\n    legend = L.control({ position: \"bottomright\" });\r\n\r\n    legend.onAdd = (map) => {\r\n      var div = L.DomUtil.create(\"div\", \"info legend\"),\r\n        grades = [0, 1000, 2000, 5000, 10000, 20000, 50000, 100000];\r\n\r\n      // loop through our density intervals and generate a label with a colored square for each interval\r\n      for (var i = 0; i < grades.length; i++) {\r\n        div.innerHTML +=\r\n          '<i style=\"background:' +\r\n          this.getColor(grades[i] + 1) +\r\n          '\"></i> ' +\r\n          grades[i] +\r\n          (grades[i + 1] ? \"&ndash;\" + grades[i + 1] + \"<br>\" : \"+\");\r\n      }\r\n\r\n      return div;\r\n    };\r\n\r\n    legend.addTo(this.map);\r\n  };\r\n\r\n  highlightFeature = (e) => {\r\n    var layer = e.target;\r\n\r\n    layer.setStyle({\r\n      weight: 5,\r\n      color: \"#666\",\r\n      dashArray: \"\",\r\n      fillOpacity: 0.7,\r\n    });\r\n\r\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\r\n      layer.bringToFront();\r\n    }\r\n    info.update(layer.feature.properties);\r\n  };\r\n\r\n  resetHighlight = (e) => {\r\n    geojson.resetStyle(e.target);\r\n    info.update();\r\n  };\r\n\r\n  zoomToFeature = (e) => {\r\n    this.map.fitBounds(e.target.getBounds());\r\n  };\r\n\r\n  onEachFeature = (feature, layer) => {\r\n    layer.on({\r\n      mouseover: this.highlightFeature,\r\n      mouseout: this.resetHighlight,\r\n      click: this.zoomToFeature,\r\n    });\r\n  };\r\n\r\n  getColor = (d) => {\r\n    return d > 100000\r\n      ? \"#007bff\"\r\n      : d > 50000\r\n      ? \"#268fff\"\r\n      : d > 20000\r\n      ? \"#4fa4ff\"\r\n      : d > 10000\r\n      ? \"#6bb3ff\"\r\n      : d > 5000\r\n      ? \"#8ac3ff\"\r\n      : d > 2000\r\n      ? \"#add5ff\"\r\n      : d > 1000\r\n      ? \"#c4e1ff\"\r\n      : \"#deeeff\";\r\n  };\r\n\r\n  style = (feature) => {\r\n    return {\r\n      fillColor: this.getColor(feature.properties.cases),\r\n      weight: 2,\r\n      opacity: 1,\r\n      color: \"white\",\r\n      dashArray: \"3\",\r\n      fillOpacity: 0.7,\r\n    };\r\n  };\r\n  render() {\r\n    return <div id=\"map\" className=\"map\"></div>;\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Home.css\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport NumberToWord from \"number-to-words\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport geoJSON from \"../Assets/geoJSON.json\";\r\nimport Map from \"./Map\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    totalCases: 0,\r\n    totalDeaths: 0,\r\n    totalRecovered: 0,\r\n    activeCases: 0,\r\n    rows: [],\r\n    tableOrMap: true,\r\n    tableOrMapLoader: true,\r\n    locations: [],\r\n    geoJSON,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    let result = await axios({\r\n      method: \"get\",\r\n      url: `https://corona.lmao.ninja/all`,\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    });\r\n    this.setState({\r\n      totalCases: result.data.cases,\r\n      totalDeaths: result.data.deaths,\r\n      totalRecovered: result.data.recovered,\r\n      activeCases:\r\n        result.data.cases - result.data.deaths - result.data.recovered,\r\n    });\r\n    result = await axios({\r\n      method: \"get\",\r\n      url: `https://corona.lmao.ninja/countries`,\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    // const rows = JSON.stringify(result.data);\r\n    const rows = result.data;\r\n    rows.sort((a, b) => {\r\n      return b.cases - a.cases;\r\n    });\r\n    // console.log(rows);\r\n\r\n    this.setState({\r\n      rows,\r\n    });\r\n\r\n    // rows.sort((a, b) => {\r\n    //   return a.country.localeCompare(b.country);\r\n    // });\r\n    for (let i = 0; i < geoJSON.features.length; i++) {\r\n      const geo = geoJSON.features[i];\r\n\r\n      for (let j = 0; j < rows.length; j++) {\r\n        const row = rows[j];\r\n        if (row.countryInfo.iso3 === geo.id) {\r\n        \r\n            geo.properties.cases = row.cases;\r\n            geo.properties.deaths = row.deaths;\r\n            geo.properties.active = row.active;\r\n            geo.properties.recovered = row.recovered;\r\n          \r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      geoJSON,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate = () => {};\r\n\r\n  sortResult = (result) => {\r\n    let totalCases = 0;\r\n    let totalDeaths = 0;\r\n    let totalRecovered = 0;\r\n    for (let i = 0; i < result.length; i++) {\r\n      const element = result[i];\r\n      if (!isNaN(element.total_cases)) {\r\n        totalCases += parseInt(element.total_cases);\r\n      }\r\n      if (element.total_death !== \"\") {\r\n        totalDeaths += parseInt(element.total_death);\r\n      }\r\n      if (element.total_recovered !== \"\") {\r\n        totalRecovered += parseInt(element.total_recovered);\r\n      }\r\n    }\r\n    console.log(totalCases, totalDeaths, totalRecovered);\r\n    this.setState({\r\n      totalCases,\r\n      totalDeaths,\r\n      totalRecovered,\r\n    });\r\n  };\r\n\r\n  tableOrMap = () => {\r\n    if (this.state.tableOrMap) {\r\n      return (\r\n        <TableContainer className=\"tableStyle\" component={Paper}>\r\n          <Table stickyHeader size=\"small\" aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"center\">#</TableCell>\r\n                <TableCell align=\"left\">Country Name</TableCell>\r\n                <TableCell align=\"left\">Cases</TableCell>\r\n                <TableCell align=\"left\">Today Cases</TableCell>\r\n                <TableCell align=\"left\">Deaths</TableCell>\r\n                <TableCell align=\"left\">Today Deaths</TableCell>\r\n                <TableCell align=\"left\">Recovered</TableCell>\r\n                <TableCell align=\"left\">Active</TableCell>\r\n                <TableCell align=\"left\">Critical</TableCell>\r\n                <TableCell align=\"left\">CP1M</TableCell>\r\n                <TableCell align=\"left\">DP1M</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {this.state.rows.map((row, i) => (\r\n                <TableRow key={i}>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {i + 1}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" component=\"th\" scope=\"row\">\r\n                    <img className=\"flag\" src={row.countryInfo.flag} alt=\"\" />{\" \"}\r\n                    &nbsp;\r\n                    {row.country}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.cases}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.todayCases}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.deaths}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.todayDeaths}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.recovered}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.active}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.critical}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.casesPerOneMillion}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <NumberFormat\r\n                      value={row.deathsPerOneMillion}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      thousandsGroupStyle=\"lakh\"\r\n                      renderText={(value) => <div>{value}</div>}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      );\r\n    } else {\r\n      return <Map geoJSON={this.state.geoJSON} />;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // const classes = this.useStyles();\r\n    return (\r\n      <div>\r\n        <div className=\"mainHead\">CORONA VIRUS (COVID-19) STATUS</div>\r\n        <div className=\"mainFigures\" style={{ color: \"darkblue\" }}>\r\n          <div className=\"mainFiguresFigure\">\r\n            <NumberFormat\r\n              value={this.state.totalCases}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              thousandsGroupStyle=\"lakh\"\r\n              renderText={(value) => <div>{value}</div>}\r\n            />\r\n          </div>\r\n          <div className=\"mainFiguresTitle\">CASES</div>\r\n          <div className=\"mainFiguresInWords\">\r\n            ({NumberToWord.toWords(this.state.totalCases)})\r\n          </div>\r\n        </div>\r\n        <div className=\"mainFigures\" style={{ color: \"red\" }}>\r\n          <div className=\"mainFiguresFigure\">\r\n            <NumberFormat\r\n              value={this.state.totalDeaths}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              thousandsGroupStyle=\"lakh\"\r\n              renderText={(value) => <div>{value}</div>}\r\n            />\r\n          </div>\r\n          <div className=\"mainFiguresTitle\">DEATHS</div>\r\n          <div className=\"mainFiguresInWords\">\r\n            ({NumberToWord.toWords(this.state.totalDeaths)})\r\n          </div>\r\n        </div>\r\n        <div className=\"mainFigures\" style={{ color: \"green\" }}>\r\n          <div className=\"mainFiguresFigure\">\r\n            <NumberFormat\r\n              value={this.state.totalRecovered}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              thousandsGroupStyle=\"lakh\"\r\n              renderText={(value) => <div>{value}</div>}\r\n            />\r\n          </div>\r\n          <div className=\"mainFiguresTitle\">RECOVERED</div>\r\n          <div className=\"mainFiguresInWords\">\r\n            ({NumberToWord.toWords(this.state.totalRecovered)})\r\n          </div>\r\n        </div>\r\n        <div className=\"mainFigures\" style={{ color: \"grey\" }}>\r\n          <div className=\"mainFiguresFigure\">\r\n            <NumberFormat\r\n              value={this.state.activeCases}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              thousandsGroupStyle=\"lakh\"\r\n              renderText={(value) => <div>{value}</div>}\r\n            />\r\n          </div>\r\n          <div className=\"mainFiguresTitle\">ACTIVE CASES</div>\r\n          <div className=\"mainFiguresInWords\">\r\n            ({NumberToWord.toWords(this.state.activeCases)})\r\n          </div>\r\n        </div>\r\n        <div className=\"switch\">\r\n          Map{\" \"}\r\n          <Switch\r\n          \r\n            checked={this.state.tableOrMap}\r\n            onChange={() => {\r\n              this.setState({ tableOrMap: !this.state.tableOrMap });\r\n             \r\n            }}\r\n            color=\"primary\"\r\n            name=\"checkedB\"\r\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n          />{\" \"}\r\n          Table\r\n        </div>\r\n\r\n        <div>\r\n          {/* <LinearProgress variant=\"buffer\" value={completed} valueBuffer={buffer} /> */}\r\n        </div>\r\n        {this.tableOrMap()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport \"./Footer.css\";\r\nclass Footer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"mainFooter\">\r\n        A little effort By Usama Majid{\" \"}\r\n        <a\r\n          style={{ color: \"white\" }}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href=\"mailto:usamamajid6@gmail.com\"\r\n        >\r\n          Contact Me!\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Home from \"./Home/Home\";\r\nimport Footer from \"./Footer/Footer\";\r\nimport Test from './Test';\r\nimport './App.css';\r\nclass App extends React.Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Home />\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nReactDOM.render(<App/>,document.getElementById('root'));"],"sourceRoot":""}